name: Packer Build Custom Image

on:
  pull_request:
    branches:
      - main

jobs:
  build:
    name: webapp-build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2
      
    - name: Making zip of the project
      run: zip -r webapp.zip .

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Setup Environment Variables
      run: |
        touch .env
        echo "MYSQL_DATABASE=${{vars.MYSQL_DATABASE}}" >> .env
        echo "MYSQL_PASSWORD=${{vars.MYSQL_PASSWORD}}" >> .env
        echo "MYSQL_USER=arpita" >> .env        

    - name: Set up MySQL
      uses: ankane/setup-mariadb@v1
      with:
        database: ${{vars.MYSQL_DATABASE}}

    - name: Creating DB User
      run: |
        sudo mysql -D ${{vars.MYSQL_DATABASE}} -e "CREATE USER 'arpita'@localhost IDENTIFIED BY '${{vars.MYSQL_PASSWORD}}';"
        sudo mysql -D ${{vars.MYSQL_DATABASE}} -e "GRANT ALL PRIVILEGES ON ${{vars.MYSQL_DATABASE}}.* TO 'arpita'@localhost;"
        sudo mysql -D ${{vars.MYSQL_DATABASE}} -e "FLUSH PRIVILEGES;"
      
    - name: Install dependencies
      run: npm install

    - name: Run integration test
      run: npm test

    - id: 'auth'
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GCP_ACCOUNT_JSON }}'

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v2'

    - name: 'Use gcloud CLI'
      run: 'gcloud info'
      
    - name: Setting up `packer`
      uses: hashicorp/setup-packer@main
      id: setup
      with:
          version: "latest"
      
    - name: Initialize packer
      id: init
      run: packer init .

    - name: Build Packer
      id: build
      run: |
        PACKER_OUTPUT=$(packer build .)
        echo "$PACKER_OUTPUT"
        IMAGE_ID=$(echo "$PACKER_OUTPUT" | grep 'A disk image was created' | grep -oP 'webapp-packer-image-\d+-\d+-\d+-\d+-\d+-\d+')
        echo "IMAGE_ID=$IMAGE_ID"
        IMAGE_NAME="projects/dev-gcp-414704/global/images/$IMAGE_ID"
        echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_OUTPUT
      #////////////////////////////////assignment #9 /////////////////////////////////////////////

          
    - name: Fetch network and subnetwork details
      run: |
         # Retrieve the PROJECT_ID and REGION from environment variables
         PROJECT_ID=$PROJECT_ID
         REGION=${{vars.REGION}}
     
         # Set the project ID in gcloud configuration
         gcloud config set project "$PROJECT_ID"
     
         # Use the network name directly
         NETWORK_NAME=${{vars.NETWORK_NAME}}
         
         # Set the subnetwork name directly
         SUBNETWORK_NAME=${{vars.SUBNETWORK_NAME}}
     
         # Print the network and subnetwork names
         echo "Network name: $NETWORK_NAME"
         echo "Subnetwork name: $SUBNETWORK_NAME"
     
         # Set environment variables for network and subnetwork names
         echo "NETWORK_NAME=$NETWORK_NAME" >> $GITHUB_ENV
         echo "SUBNETWORK_NAME=$SUBNETWORK_NAME" >> $GITHUB_ENV
      env:
           PROJECT_ID: ${{ secrets.PROJECT_ID }}
           REGION: ${{vars.REGION}}     
           
    - name: Fetch Service Account Email
      id: fetch-email
      run: |
        EMAIL_ADDRESS=$(gcloud iam service-accounts list --format='value(email)' --filter="displayName=VM Service Account")
        echo "Service Account Email: $EMAIL_ADDRESS"
      shell: bash

    - name: Set EMAIL_ADDRESS in environment file
      run: |
            echo "EMAIL_ADDRESS=${{ steps.fetch-email.outputs.stdout }}" >> $GITHUB_ENV
            echo "IMAGE_NAME = $IMAGE_NAME"

               
    - name: Create new instance template version
      run: |
            # Retrieve secret values from Google Secret Manager
            MYSQL_DATABASE=$(gcloud secrets versions access latest --secret="MYSQL_DATABASE")
            MYSQL_USER=$(gcloud secrets versions access latest --secret="MYSQL_USER")
            MYSQL_PASSWORD=$(gcloud secrets versions access latest --secret="MYSQL_PASSWORD")
            MYSQL_HOST=$(gcloud secrets versions access latest --secret="MYSQL_HOST")
            ENV=$(gcloud secrets versions access latest --secret="ENV")
        
            # Create metadata script
            METADATA=$(cat <<EOF
            #!/bin/bash
            set -e
        
            # Change directory to /opt
            cd /opt
        
            # Create a .env file with database connection details
            if [ ! -f /opt/.env ]; then
              echo "MYSQL_DATABASE=${MYSQL_DATABASE}" >> /opt/.env
              echo "MYSQL_USER=${MYSQL_USER}" >> /opt/.env
              echo "MYSQL_PASSWORD=${MYSQL_PASSWORD}" >> /opt/.env
              echo "MYSQL_HOST=${MYSQL_HOST}" >> /opt/.env
              echo "ENV=${ENV}" >> /opt/.env
            fi
            
            # Reload systemctl daemon
            sudo systemctl daemon-reload

            # Enable and start webapp service
            sudo systemctl enable webapp.service
            sudo systemctl start webapp.service
            EOF
            )
        
            # Run gcloud command to create instance template
            gcloud compute instance-templates create new-webapp-instance-template \
              --machine-type=${{vars.MACHINE_TYPE}} \
              --instance-template-region=${{vars.REGION}} \
              --tags=${{vars.TAGS}} \
              --image=${{steps.build.outputs.IMAGE_NAME}} \
              --boot-disk-size=${{vars.BOOT_SIZE}} \
              --boot-disk-kms-key=${{vars.KMS_KEY}} \
              --boot-disk-type=${{vars.DISK_TYPE}} \  # Add this line
              --network=projects/${{ secrets.PROJECT_ID }}/global/networks/${{vars.NETWORK_NAME }} \
              --subnet=projects/${{ secrets.PROJECT_ID }}/regions/${{vars.REGION}}/subnetworks/${{ vars.SUBNETWORK_NAME }} \
              --network-tier=${{vars.NETWORK_TIER}} \
              --service-account=${{ secrets.SERVICE_ACCOUNT }} \
              --scopes=${{vars.SCOPES}} \
              --metadata=startup-script="${METADATA}"

    - name:  Managed Instance Group with new instance templae
      run: |
                # Set the project ID in gcloud configuration
                gcloud config set project "$PROJECT_ID"
            
                # Define variables
                INSTANCE_GROUP_NAME=${{vars.INSTANCE_GROUP_NAME}}
                INSTANCE_TEMPLATE="projects/${{ secrets.PROJECT_ID }}/regions/${{vars.REGION}}/instanceTemplates/new-webapp-instance-template"
            
                gcloud compute instance-groups managed set-instance-template $INSTANCE_GROUP_NAME \
                --template $INSTANCE_TEMPLATE \
                --region=${{vars.REGION}}
      env:
                  PROJECT_ID: ${{ secrets.PROJECT_ID }}
                  REGION: ${{vars.REGION}} 

    - name:  Starting a basic rolling update

      run: |
            INSTANCE_GROUP_NAME=${{vars.INSTANCE_GROUP_NAME}}
            INSTANCE_TEMPLATE="projects/${{ secrets.PROJECT_ID }}/regions/${{vars.REGION}}/instanceTemplates/new-webapp-instance-template"
            ZONE=${{vars.ZONE}}
            REGION=${{vars.REGION}} 

 
            gcloud compute instance-groups managed rolling-action start-update $INSTANCE_GROUP_NAME \
            --version=template=$INSTANCE_TEMPLATE \
            --region=${{vars.REGION}} 
            

    - name:  Monitoring updates
      run: |

            INSTANCE_GROUP_NAME=${{vars.INSTANCE_GROUP_NAME}}
            INSTANCE_TEMPLATE="projects/${{ secrets.PROJECT_ID }}/regions/${{vars.REGION}}/instanceTemplates/new-webapp-instance-template"
            ZONE=${{vars.ZONE}} 
            REGION=${{vars.REGION}}  

            gcloud compute instance-groups managed wait-until $INSTANCE_GROUP_NAME \
            --version-target-reached \
            --region=${{vars.REGION}} 
