name: Packer Build Custom Image

on:
  pull_request:
    branches:
      - main

jobs:
  build:
    name: webapp-build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2
      
    - name: Making zip of the project
      run: zip -r webapp.zip .

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Setup Environment Variables
      run: |
        touch .env
        echo "MYSQL_DATABASE=${{vars.MYSQL_DATABASE}}" >> .env
        echo "MYSQL_PASSWORD=${{vars.MYSQL_PASSWORD}}" >> .env
        echo "MYSQL_USER=arpita" >> .env        

    - name: Set up MySQL
      uses: ankane/setup-mariadb@v1
      with:
        database: ${{vars.MYSQL_DATABASE}}

    - name: Creating DB User
      run: |
        sudo mysql -D ${{vars.MYSQL_DATABASE}} -e "CREATE USER 'arpita'@localhost IDENTIFIED BY '${{vars.MYSQL_PASSWORD}}';"
        sudo mysql -D ${{vars.MYSQL_DATABASE}} -e "GRANT ALL PRIVILEGES ON ${{vars.MYSQL_DATABASE}}.* TO 'arpita'@localhost;"
        sudo mysql -D ${{vars.MYSQL_DATABASE}} -e "FLUSH PRIVILEGES;"
      
    - name: Install dependencies
      run: npm install

    - name: Run integration test
      run: npm test

    - id: 'auth'
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GCP_ACCOUNT_JSON }}'

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v2'

    - name: 'Use gcloud CLI'
      run: 'gcloud info'
      
    - name: Setting up `packer`
      uses: hashicorp/setup-packer@main
      id: setup
      with:
          version: "latest"
      
    - name: Initialize packer
      id: init
      run: packer init .

    - name: Build Packer
      id: build
      run: |
        PACKER_OUTPUT=$(packer build .)
        echo "$PACKER_OUTPUT"
        IMAGE_ID=$(echo "$PACKER_OUTPUT" | grep 'A disk image was created' | grep -oP 'webapp-packer-image-\d+-\d+-\d+-\d+-\d+-\d+')
        echo "IMAGE_ID=$IMAGE_ID"
        IMAGE_NAME="projects/dev-gcp-414704/global/images/$IMAGE_ID"
        echo "::set-output name=image-id::$IMAGE_NAME"

      #////////////////////////////////assignment #9 /////////////////////////////////////////////

       # Add steps to build and deploy your application as needed

          
    - name: Fetch network and subnetwork details
      run: |
           NETWORK_NAME=$(gcloud compute networks list --format="value(NAME)" --project=PROJECT_ID)
           SUBNETWORK_NAME=$(gcloud compute networks subnets list --format="value(NAME)" --project=PROJECT_ID --region=REGION --network=NETWORK_NAME)
           echo "Network name: $NETWORK_NAME"
           echo "Subnetwork name: $SUBNETWORK_NAME"
           echo "::set-env name=NETWORK_NAME::$NETWORK_NAME"
           echo "::set-env name=SUBNETWORK_NAME::$SUBNETWORK_NAME"
      env:
           PROJECT_ID: ${{ secrets.PROJECT_ID }}
           REGION: us-east4     
           
    - name: Fetch Service Account Email
      run: |
             EMAIL_ADDRESS=$(gcloud iam service-accounts list --format='value(email)' --filter="displayName=VM Service Account")
             echo "Service Account Email: $EMAIL_ADDRESS"
             echo "::set-env name=EMAIL_ADDRESS::$EMAIL_ADDRESS"
               
    - name: Create new instance template version
      run: |
            # Retrieve secret values from Google Secret Manager
            MYSQL_DATABASE=$(gcloud secrets versions access latest --secret="MYSQL_DATABASE")
            MYSQL_USER=$(gcloud secrets versions access latest --secret="MYSQL_USER")
            MYSQL_PASSWORD=$(gcloud secrets versions access latest --secret="MYSQL_PASSWORD")
            MYSQL_HOST=$(gcloud secrets versions access latest --secret="MYSQL_HOST")
            ENV=$(gcloud secrets versions access latest --secret="ENV")
        
            # Create metadata script
            METADATA=$(cat <<EOF
            #!/bin/bash
            set -e
        
            # Change directory to /opt
            cd /opt
        
            # Create a .env file with database connection details
            if [ ! -f /opt/.env ]; then
              echo "MYSQL_DATABASE=${MYSQL_DATABASE}" >> /opt/.env
              echo "MYSQL_USER=${MYSQL_USER}" >> /opt/.env
              echo "MYSQL_PASSWORD=${MYSQL_PASSWORD}" >> /opt/.env
              echo "MYSQL_HOST=${MYSQL_HOST}" >> /opt/.env
              echo "ENV=${ENV}" >> /opt/.env
            fi
            
            # Reload systemctl daemon
            sudo systemctl daemon-reload

            # Enable and start webapp service
            sudo systemctl enable webapp.service
            sudo systemctl start webapp.service
            EOT
            )
        
            # Run gcloud command to create instance template
            gcloud compute instance-templates-region create new-webapp-instance-template \
              --machine-type=n2d-highmem-16 \
              --region=$REGION \
              --tags=web-application \
              --image=$IMAGE_ID \
              --image-project=$PROJECT_ID \
              --boot-disk-size=100 \
              --network=projects/${{ secrets.PROJECT_ID }}/global/networks/${{ env.NETWORK_NAME }} \
              --subnet=projects/${{ secrets.PROJECT_ID }}/regions/${{ env.REGION }}/subnetworks/${{ env.SUBNETWORK_NAME }} \
              --network-tier=PREMIUM \
              --service-account=$EMAIL_ADDRESS \
              --scopes=cloud_platform \
              --metadata=startup-script="${METADATA}"
